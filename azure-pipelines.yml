pool:
  vmImage: 'ubuntu-latest'

variables:
  buildConfiguration: 'Release'
  packageAndPublish: $[ and(
        ne(variables['Build.Reason'], 'PullRequest'), 
        or( eq(variables['Build.SourceBranch'], 'refs/heads/master'), 
          eq(variables['Build.SourceBranch'], 'refs/heads/dev')
        )
    ) ]
  
jobs:
- job: build_and_test
  displayName: 'Build & Test'
  steps:
  - task: UseDotNet@2
    inputs:
      packageType: 'sdk'
      version: '5.0.x'

  - script: dotnet clean --configuration $(buildConfiguration)
    displayName: '.NET - clean'

  - script: dotnet build --configuration $(buildConfiguration)
    displayName: '.NET - build'

  - script: dotnet test tests/**/*.csproj --configuration $(buildConfiguration) --no-build
    displayName: '.NET - test'
    
- job: pack_and_publish 
  displayName: 'Package & Publish'
  dependsOn: build_and_test
  condition: eq(variables['packageAndPublish'], true)
  variables:
    ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/dev') }}:
      VERSION_SUFFIX: '--version-suffix pre.$(Build.BuildNumber)'
    ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/master') }}:
      VERSION_SUFFIX: ''
  steps:
  - task: DotNetCoreCLI@2
    displayName: '.NET - Create Packages'
    inputs:
      command: custom
      custom: pack
      arguments: -c $(buildConfiguration) -o $(Build.ArtifactStagingDirectory)/packages -v m $(VERSION_SUFFIX)
      zipAfterPublish: true

  - task: NuGetCommand@2
    displayName: 'Publish NuGet package'
    inputs:
      command: 'push'
      packagesToPush: '$(Build.ArtifactStagingDirectory)/packages/*.nupkg;!$(Build.ArtifactStagingDirectory)/packages/*.symbols.nupkg'
      nuGetFeedType: 'external'
      allowPackageConflicts: true
      publishFeedCredentials: 'NuGet.org'
    condition: succeeded()